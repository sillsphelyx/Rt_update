
# coding: utf-8

# In[1]:


def get_K(DFSeries):
    
    ''' This function is for fitting the exponential function to 
    series of confirmed cases in order to estimate the exponential
    growth rate K '''
 
    import numpy as np
    from lmfit import minimize, Parameters, report_fit # added by [NO]
    
    params = Parameters()
    params.add('a', value=0.)
    params.add('b', value=0.)
    def get_residuals(params, x, data):
        a=params['a'].value
        b=params['b'].value
        model = a * np.exp(b*x)
        return data - model
    x = np.arange(len(DFSeries))
    data = list(DFSeries.values)
    out = minimize(get_residuals,params, args = (x,data))
    a = out.params['a'].value
    b = out.params['b'].value
    sigma_b = out.params['b'].stderr
    
    #a = LogisticFit[0][0]
    #b = LogisticFit[0][1] # This is also known as K from description in Wikipedia
    
    # The dooubling rate is given by T_d
    
    T_d = np.log(2)/b
        
    return (b) 

def Update_Rt(DF,Days_of_int=14):
    '''This function will calculate the value of Rt for a DataFrame with k columns and atleast 2 rows.
    In order to calculate R0 we can adapt this 
    https://en.wikipedia.org/wiki/Basic_reproduction_number#Estimation_methods

    Reminder: Rt = R0 when no intervention has been applied and there is mixing
    
    usage get_Rt(pandas DataFrame)
    
    Input:
        Take in a pandas DataFrame with columns representing series of confirmed cases or deaths and the number of most           recent days for which you want to estimate Rt (default=14).
    Output:
        Return DataFrame with respective median Rt values and their 95% CI's for each respective column's Rt                     distributions generated by way of sampling the infectiousness time from a gaussian with mean 9.3 and                     standard deviation 1.15
    '''
    import numpy as np
    import pandas as pd
    itr = 1000
    Rt_dict = dict()
    for col in DF.columns:
        K = get_K(DF.tail(Days_of_int)[col])
        R_t = np.zeros(itr)
        for i in range(itr):
            tau = np.random.normal(10.5,1.15)
            R_t[i] = np.exp(K*tau)
        Rt_dict.update({col:[np.percentile(R_t, 50),(np.percentile(R_t, 2.5),np.percentile(R_t, 97.5))]})
    Rt_est_df = pd.DataFrame.from_dict(Rt_dict, orient='index', columns=['Median_Rt_estimate', '95%CI'])
    return(Rt_est_df)


# In[ ]:



